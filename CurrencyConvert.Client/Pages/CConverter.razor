@page "/"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@using Currency.Contract.DTO
@using Currency.Contract.Requests
@using Currency.Contract.Responses
@using Microsoft.Extensions.Logging
@inject HttpClient Http
@inject ILogger<CConverter> Logger;

@if (currencies == null)
{
    <p>No currencies found.</p>
}
else
{
    <p>
        <label>
            <select value="@FirstSelectedCurrency" class="form-control selectpicker" data-live-search="true" @onchange="ApplyFirstSelectedCurrencyUpdateAsync">
                @foreach (var currency in currencies)
                {
                    <option value="@currency.Symbol"> @currency.Name </option>
                }
            </select>
            <input value="@FirstCurrencyAmount"
               @oninput="UpdateAndConvertToSecondCurrencyAsync" />
        </label>
    </p>

    <p>
        <label>
            <select value="@SecondSelectedCurrency" class="form-control selectpicker" data-live-search="true" @onchange="ApplySecondSelectedCurrencyUpdateAsync">
                @foreach (var currency in currencies)
                {
                    <option value="@currency.Symbol"> @currency.Name </option>
                }
            </select>
            <input value="@SecondCurrencyAmount"
               @oninput="UpdateAndConvertToFirstCurrencyAsync" />
        </label>
    </p>
}



@code {
    private string FirstCurrencyAmount { get; set; }

    private string SecondCurrencyAmount { get; set; }

    private string FirstSelectedCurrency { get; set; }

    private string SecondSelectedCurrency { get; set; }

    private CurrencyDto[] currencies;

    protected override async Task OnInitializedAsync()
    {
        currencies = await Http.GetFromJsonAsync<CurrencyDto[]>("api/currencies").ConfigureAwait(false);
        FirstSelectedCurrency = currencies[0].Symbol;
        SecondSelectedCurrency = currencies[1].Symbol;
    }

    private async Task ApplyFirstSelectedCurrencyUpdateAsync(ChangeEventArgs args)
    {
        FirstSelectedCurrency = args.Value.ToString();
        SecondCurrencyAmount = await ConvertCurrencyAsync(FirstCurrencyAmount, FirstSelectedCurrency, SecondSelectedCurrency).ConfigureAwait(false);
    }

    private async Task ApplySecondSelectedCurrencyUpdateAsync(ChangeEventArgs args)
    {
        SecondSelectedCurrency = args.Value.ToString();
        FirstCurrencyAmount = await ConvertCurrencyAsync(SecondCurrencyAmount, SecondSelectedCurrency, FirstSelectedCurrency).ConfigureAwait(false);
    }

    private async Task UpdateAndConvertToSecondCurrencyAsync(ChangeEventArgs args)
    {
        FirstCurrencyAmount = args.Value.ToString();
        SecondCurrencyAmount = await ConvertCurrencyAsync(FirstCurrencyAmount, FirstSelectedCurrency, SecondSelectedCurrency).ConfigureAwait(false);
    }

    private async Task UpdateAndConvertToFirstCurrencyAsync(ChangeEventArgs args)
    {
        SecondCurrencyAmount = args.Value.ToString();
        FirstCurrencyAmount = await ConvertCurrencyAsync(SecondCurrencyAmount, SecondSelectedCurrency, FirstSelectedCurrency).ConfigureAwait(false);
    }

    private async Task<string> ConvertCurrencyAsync(string inputValue, string fromCurrency, string toCurrency)
    {
        if (fromCurrency == toCurrency)
        {
            return inputValue;
        }

        if (float.TryParse(inputValue, out float amount))
        {
            try
            {
                var convertRequest = new CurrencyConvertRequest(fromCurrency, toCurrency, amount);
                var convertResponse = await this.ConvertCurrencyBackendAsync(convertRequest);
                var roundedValue = Math.Round((Decimal)convertResponse.Result, 2);
                return roundedValue.ToString();
            }
            catch (HttpRequestException ex)
            {
                Logger.LogError(ex, "A HTTP exception occurred when converting a currency");
            }
        }
        return "Please enter a number.";
    }

    private async Task<CurrencyConvertResult> ConvertCurrencyBackendAsync(CurrencyConvertRequest request)
    {
        var response = await Http.PostAsJsonAsync<CurrencyConvertRequest>("api/convert", request).ConfigureAwait(false);
        //If http response code unsuccessful we log error and throw HttpRequestException.
        response.EnsureSuccessStatusCode();
        return await response.Content.ReadFromJsonAsync<CurrencyConvertResult>().ConfigureAwait(false);
    }
}